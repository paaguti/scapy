% BGP-4 tests
% 
% Type the following command to launch start the tests:
% $ sudo bash test/run_tests -t scapy/contrib/bgp.uts -F
%

+ BGP-4 tests
= Load BGP-4 library
load_contrib("bgp")

% BGPv4 basic messages
= BGP-4 Keep Alive, calculate length when no payload

keep = BGPHeader(type=4)
str(keep) == '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x13\x04'

= Packet chopping

bgp = BGPTraffic(str(keep)*4)

len(bgp.packets) == 4

= Layering + Origin + LocalPreference

update = BGPHeader(type=2) / BGPUpdate(total_path=[BGPOrigin(origin=0),BGPNextHop(next_hop='192.168.0.1'),BGPLocalPreference(local_pref=200)],nlri=['0.0.0.0/0'])

update2 = BGPHeader(str(update))
update2.show()

update2[BGPHeader].total_path[2].local_pref == 200
print update2.len
update2.len == 19 + 2 + 2 + 4 + 7 + 7 + 1

keep=BGPHeader(type=4)

traffic=BGPTraffic(str(keep)+str(update)+str(keep))
traffic.show()
len(traffic.packets) == 3

= Other Attributes

len(str(BGPAtomicAggregate())) == 3
BGPAtomicAggregate().show()

aggr = str(BGPAggregator(aggregator="192.168.0.1"))
agg  = BGPAggregator(aggr)
agg.show()
agg.type == 7 and agg.attr_len == 4

= AS_PATH

segm = BGPASSegment(segment_type=2,segment=['AS6813','AS3615:200'])

segm.show()

path = BGPASPath(as_path=[segm])
npath = BGPASPath(str(path))
npath.show()
npath.attr_len == 9

= Communities

comm = BGPCommunities("\xc0\x08\x08\xfe\x09\x01\xf4\xfe\x09\x02\x58")
len(comm.communities) == 2
comm.show()

comm2 = BGPCommunities(communities = ["65033:500","65033:600"])
comm2.show()
BGPCommunities(str(comm2)).attr_len == 8
str(comm2) == str(comm)

update = BGPHeader(type=2) / BGPUpdate(total_path=[
         BGPOrigin(origin=0),
         BGPASPath(as_path=[BGPASSegment(segment_type=2,segment=['AS65033','AS65033'])]),
         BGPNextHop(next_hop='192.168.0.1'),
         BGPLocalPreference(local_pref=200),
         BGPCommunities(communities=['65033:500','65033:600'])
       ],
       nlri=['10.0.0.0/8'])

BGPHeader(str(update)).show()
